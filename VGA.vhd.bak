-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;

entity VGA is

	port(
		clk		 : in	std_logic;
		input: in	std_logic;
		
		rojo, verde, azul: in std_logic_vector(4 downto 0);
		
		
		reset	 : in	std_logic;
		output	 : out	std_logic_vector(1 downto 0);
		
		VGA_HS, VGA_VS: out std_logic;
		Rojo_out, Verde_out, Azul_out :out std_logic_vector(9 downto 0);
		VGA_blank, VGA_sync, VGA_clk: out std_logic
		
	);

end entity;

architecture VGA of  is

	-- Build an enumerated type for the state machine
	type state_type_HS is (s_aHS, s_bHS, s_cHS, s_dHS);
	type state_type_VS is (s_aVS, s_bVS, s_cVS, s_dVS);
	-- Register to hold the current state
	signal state_HS   : state_type;
	signal state_VS   : state_type;
	
	
	
	signal count_clk: integer := 0;
	signal count_linea: integer := 0;
	
	
	signal H_Blank, V_Blank:std_logic;
	

begin

	-- Logic to advance to the next state
-- VGA_HS Maquina de estado	
	process (clk, reset)
	begin
		if reset = '1' then
			state_HS <= s_aHS;
		elsif (rising_edge(clk)) then
			case state_HS is
			
				when s_aHS =>
					if count_clk = 96 then
						state_HS <= s_bHS;
					else
						state_HS <= s_aHS;
					end if;
					
				when s_bHS=>
					if count_clk = 144 then
						state_HS <= s_cHS
					else	
						state <= s_bHS;
					end if;
					
				when s_cHS=>
					if count_clk = 784 then
						state_HS <= s_dHS;
					else
						state_HS <= s_cHS;
					end if;
					
				when s_dHS =>
					if count_clk = 800 then
						state_HS <= s_aHS;
						count_clk <= 0;
					
					else
						state_HS <= s_dHS;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state_HS)
	begin
		case state_HS is
			when s_aHS =>
				VGA_HS <= '0';
				H_Blank <= '0';
				
			when s_bHS =>
				VGA_HS <= '1';
				H_Blank <= '0';
				
			when s_cHS =>
				VGA_HS <= '1';
				H_Blank <= '1';
				
			when s_dHS =>
				VGA_HS <= '1';
				H_Blank <= '0';
				
		end case;
	end process;
	
	
--Machina de estado VGA_VS
	process (clk, reset)
	begin
		if reset = '1' then
			state <= s0;
		elsif (rising_edge(clk)) then
			case state is
				when s0=>
					if input = '1' then
						state <= s1;
					else
						state <= s0;
					end if;
				when s1=>
					if input = '1' then
						state <= s2;
					else
						state <= s1;
					end if;
				when s2=>
					if input = '1' then
						state <= s3;
					else
						state <= s2;
					end if;
				when s3 =>
					if input = '1' then
						state <= s0;
					else
						state <= s3;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;

end rtl;
